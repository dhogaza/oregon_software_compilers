-- next priorities:
1. function return values - don't need to worry about large types
   and r8 for standard Pascal.  Will want to extend later on, like
   after procedure params, conformant params, and the like, as the
   code generator uses the ability to return records heavily.

   need dummy allocfunction in mc68K mda.pas though might later
   unkludge this and do it properly.

   if a function has funcallocated true and is not some kind of register
   allocation and some magic to tell us it needs to be returned in a
   register (set regid in the mda allocfunction code? could this use
   registerfunction?) then generate a regvalue of the correct type,
   the address of the stored functino return value, and a move.

2. enter and restore loop code
5. instantiation of integers to include large numbers.
6. instantiation of integers as bitmasks
7. long address index values, consider alignment
8. REVERSE STACK PARAM PUSHES
9. lots of sign extension and the like issues
10.targeting logic sucks on this machine, too many instances
   of ld xn, mem/op xm,xn/mov xn,xm/ when xm is no longer useful.

-- more general

1. if current block makes no calls allocate regtemps to
   caller-saved registers.  Better, track calls to procs
   including intrinsics and determine which scratch registers
   are never used by called procedures in a block and 
   allocate those first so we can avoid saving them.
2. Need to allow parameters that aren't required to be in
   memory for nested procs to be assigned true regtemps
   as frequent use of params in the context of many calls
   to procs leads to horrendous number of spills
3. what's with cseregions being zero?  bug in the code?


Advantages of using negative sp offsets when generating code:

1. no need to adjust offsets when growing the stacks, just
   track the maximum depth of the stack.
2  can simplify by only deleting unnecessary saves to the stack
   and ignoring space reclamation (this doesn't depend on 
   stack offsets being negative).
3. parameter offsets can be kept positive.
4. at the end, adjust all negative stack offsets by the maximum
   depth.  not adjusting param positive offsets keeps them at
   the top of the stack where they need to be for function
   calls.
5. restore stackoffset at restorelabel but keep maxstackoffset
   untouched of course.
6. haven't figured out how to reclaim space and don't care much
   at the moment.

Big integer issues:

1. materializing integers will require some work though the first
   effort should just be a string of moves to build up the proper
   length number.

2. materialized integers are most likely not worth preserving as
   on high-end aarch64 cores mov/movk pairs execute in a single
   cycle.  Preserving the resulting register is a one instruction
   win in space but no gain in speed and eats a register that might
   be useful elsewhere.  Default integers are 32-bit.  64-bit integers
   take four instructions or two cycles.  Unless they can be
   generated as bitmasks.

3. big index offsets are a pain.  Most likely preserving them, once
   calculated, isn't all that worthwhile. 

4. Ignore all of the above until some stuff actually works.

Register parameters:

1. Complications include short structs that are passed in two registers.
   GCC passes the struct on the stack if there aren't two variables left.

2, Huge complication regarding records with uniform float/double fields that
   will fit in the parameter registers.

Future enhancements to improve:

1. This will require new pseudoops with some way to pass the add/sub
   operand along with the normal left/right ones, preferably without
   losing targeting.
   a) combine multiply followed by add or subtract into MADD/MSUB
   b) combine multiply followed by aindx with length of 1 (no scaling)
      into addrop+MADD/MSUB.
2. flatten expressions with comparisions
n-1: find uses for all sorts of weird instructions
n. vectorization because that was something I always wanted to do ...

Peephole needs:

1. Two register loads from consecutive memory address converted to
   ldp insruction.
2. cmp xn,0; b.cond l -> cbz x0,l, cond and associated thingies
