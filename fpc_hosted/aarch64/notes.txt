-- next priorities:

0.2 improve vs pushfinal which no longer exists (simpleinvar), need
    to add a finalop to replace pushfinal?  This is used to designate
    an invariant final limit ...

    Needs testing, it might actually work as is.

0.3 align character constants to min(len, 8) byte boundary.

    align variables, too.

    This makes using 2, 4, 8 byte moves possible for structs.

0.4 fix up lastlabel/newlabel/definelastlabel bullshit


2. improve for loops/fix

   a. if a register is loaded before the top compare and after
      last branch (boolean expressions in first or last expression),
      mark it.  It doesn't need to be reloaded at the bottom.

4.  yet to be figured out how to put the reg return value forced
   to physical reg 0 in leaf functions if allocated as a valuable
   regtemp by improve?  Or is this really a viable
   idea if param 0 is being used?
7. long address index values, consider alignment
8. REVERSE STACK PARAM PUSHES
9. lots of sign extension and the like issues?
10.targeting logic sucks on this machine, too many instances
   of ld xn, mem/op xm,xn/mov xn,xm/ when xm is no longer useful.

11. block moves should just use memcpy for now.  optimizing these is
    very low on the priority list.

0. change registers to a enum to make sets of them more reasonable?


-- more general

1. if current block makes no calls allocate regtemps to
   callee-saved registers.  Better, track calls to procs
   including intrinsics and determine which scratch registers
   are never used by called procedures in a block and 
   allocate those first so we can avoid saving them.  Track
   by context stack with more logic in travrs?
2. Need to allow parameters that aren't required to be in
   memory for nested procs to be assigned true regtemps
   as frequent use of params in the context of many calls
   to procs leads to horrendous number of spills
3. what's with cseregions being zero?  bug in the code?


Advantages of using negative sp offsets when generating code:

1. no need to adjust offsets when growing the stacks, just
   track the maximum depth of the stack.
2  can simplify by only deleting unnecessary saves to the stack
   and ignoring space reclamation (this doesn't depend on 
   stack offsets being negative).
3. parameter offsets can be kept positive.
4. at the end, adjust all negative stack offsets by the maximum
   depth.  not adjusting param positive offsets keeps them at
   the top of the stack where they need to be for function
   calls.
5. restore stackoffset at restorelabel but keep maxstackoffset
   untouched of course.
6. haven't figured out how to reclaim space and don't care much
   at the moment.

7. Note that FPC seems to simply keep adding stuff to the stack
   along two branches of an if etc.  Does no reusing.  GCC? CLANG?

   The FPC approach is memory wasteful but means stack access can
   be generated without any need to adjust offsets and all that
   which is a major problem with the negative offset approach which
   is corrected later, greatly complicating generating stack offsets
   greater than 4096 longs above the sp.
   
8. gcc allocates a local variable for the copy destination of a long
   value parameter.  Not a bad idea.  Reserving the stack for register
   spills only and short parameters when there are more than 8 of them
   makes the odds of neading more than 4K elements very, very unlikely.
   Does the same for long function return values.  Again, not a bad
   idea.

9. use positive stack offsets for param pushes?  negative only for 
   register spills?

Big integer issues:

3. big index offsets are a pain.  Most likely preserving them, once
   calculated, isn't all that worthwhile. 

4. Ignore all of the above until some stuff actually works.

Register parameters:

1. Complications include short structs that are passed in two registers.
   GCC passes the struct on the stack if there aren't two variables left.

2, Huge complication regarding records with uniform float/double fields that
   will fit in the parameter registers.

Future enhancements to improve:

1. This will require new pseudoops with some way to pass the add/sub
   operand along with the normal left/right ones, preferably without
   losing targeting.
   a) combine multiply followed by add or subtract into MADD/MSUB
   b) combine multiply followed by aindx with length of 1 (no scaling)
      into addrop+MADD/MSUB.
2. flatten expressions with comparisions
n-1: find uses for all sorts of weird instructions
n. vectorization because that was something I always wanted to do ...

Peephole needs:

1. Two register loads from consecutive memory address converted to
   ldp insruction.
2. cmp xn,0; b.cond l -> cbz x0,l, cond and associated thingies

FAILS (for now at least)

0.1 It appears that the [Xr, :lo12:xyz+n] does the right
    thing for all ldr/str [long, word, half, byte].  However
    the data must be aligned correctly, obviously.

    when generating a global variable address, don't save
    the index register on the stack.  If the register is marked
    as killed, regenerate it through a new adp as this is faster
    than doing a ldr reg,[sp,n]

    Possible approach:

    1. mark regsaved in indxx
    2. makeaddressable can kludge it by using the label_offset operand
       to generate an adrp to a new restore register.

    is this as easy as it sounds? :)

    almost.  Works fine but the original adp used to generate the index
    is not, of course, deleted.  Can we delay the actual generation of
    the address to makeaddressable?  Maybe so then the save/restore
    kludge can disappear?

    In indxx generate the proper mode but
    don't generate the adrp, set reg to noreg (!).  Make addressable
    will fix this up on the very first use by a pseudoinst that actually
    needs it as an operand to an instruction.  Hmmm.  Tricky.  Just might
    work.

    That actually works but a bunch of dupe adrps result.  indx ops are
    hoisted so if the register can be preserved it would be a win to 
    precalculate.  Perhaps a new keyx field "addressed" and if the proper
    kind of key value is marked but not addressed, the dangling adrp can be
    deleted.

    Minor is that globals should be indexed before aindx with the variable
    base for this scheme, 'way back in body.pas.  Conditionalized for aarch64
    if course.
